{"version":3,"file":"js/67.10be75e2.js","mappings":"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","sources":["webpack://vue2.0/./src/view/welcomeContent/welcomeContent.vue","webpack://vue2.0/src/view/welcomeContent/welcomeContent.vue","webpack://vue2.0/./src/view/welcomeContent/welcomeContent.vue?d03c","webpack://vue2.0/./src/view/welcomeContent/welcomeContent.vue?ce75"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('iframe',{staticStyle:{\"display\":\"none\"},attrs:{\"id\":\"geoPage\",\"width\":\"0\",\"height\":\"0\",\"frameborder\":\"0\",\"scrolling\":\"no\",\"src\":\"https://apis.map.qq.com/tools/geolocation?key=DRSBZ-WO43X-OLO4S-ZOVE5-AB6RV-5WFH2&referer=111\"}}),_c('div',{staticClass:\"search\"},[_c('el-input',{staticClass:\"search-inp\",attrs:{\"placeholder\":\"请输入要搜索的地名\"},model:{value:(_vm.address),callback:function ($$v) {_vm.address=$$v},expression:\"address\"}}),_c('div',{staticClass:\"search-btn\",on:{\"click\":_vm.search}},[_vm._v(\"搜索\")])],1),_c('div',{staticStyle:{\"height\":\"400px\",\"width\":\"100%\",\"text-align\":\"center\",\"line-height\":\"500px\",\"font-size\":\"20px\"},attrs:{\"id\":\"container\"}}),_c('div',{staticClass:\"list\"},_vm._l((_vm.list),function(item,index){return _c('div',{key:index,staticClass:\"list-item\",on:{\"click\":function($event){return _vm.listClick(item)}}},[_c('div',{staticClass:\"list-item-left\"},[_c('div',{staticClass:\"list-item-name\"},[_vm._v(_vm._s(item.name || ''))]),_c('div',{staticClass:\"list-item-address\"},[_vm._v(_vm._s(item.addr || ''))])]),_c('div',{staticClass:\"list-item-btn\"},[_vm._v(\"发送\")])])}),0)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <iframe id=\"geoPage\" width=0 height=0 frameborder=0 style=\"display:none;\" scrolling=\"no\" src=\"https://apis.map.qq.com/tools/geolocation?key=DRSBZ-WO43X-OLO4S-ZOVE5-AB6RV-5WFH2&referer=111\">\r\n        </iframe>\r\n        <div class=\"search\">\r\n            <el-input class=\"search-inp\" v-model=\"address\" placeholder=\"请输入要搜索的地名\"></el-input>\r\n            <div class=\"search-btn\" @click=\"search\">搜索</div>\r\n        </div>\r\n        <div id=\"container\" style=\"height: 400px;width: 100%;text-align: center;line-height: 500px;font-size: 20px;\">\r\n        </div>\r\n        <div class=\"list\">\r\n            <div class=\"list-item\" v-for=\"(item,index) in list\" :key=\"index\" @click=\"listClick(item)\">\r\n                <div class=\"list-item-left\">\r\n                    <div class=\"list-item-name\">{{item.name || ''}}</div>\r\n                    <div class=\"list-item-address\">{{item.addr || ''}}</div>\r\n                </div>\r\n                <div class=\"list-item-btn\">发送</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nconst qq = window.qq;\r\nimport { Toast } from 'vant';\r\nexport default {\r\n    data () {\r\n        return {\r\n            str: '',\r\n            list: [\r\n                // {\r\n                //     addr: 'add123', latLng\r\n                //         : { lat: '123', lng: '123' }\r\n                // }\r\n            ],\r\n            address: ''\r\n        };\r\n    },\r\n    created () {\r\n        document.title = '地图';\r\n    },\r\n    mounted () {\r\n        Toast.loading({\r\n            duration: 0, // 持续展示 toast\r\n            forbidClick: true,\r\n            message: '加载地图中...',\r\n        });\r\n        this.type = false;\r\n        const that = this;\r\n        // window.addEventListener('message', function (event) {\r\n        //     // 接收位置信息\r\n        //     var loc = event.data;\r\n        //     if (loc && loc.lat && loc.lng && !that.type) {\r\n        //         that.type = true;\r\n        //         console.log(loc);\r\n        //         that.initAddress(loc.lat, loc.lng);\r\n        //     }\r\n        // }, false);\r\n\r\n        this.geolocation = new qq.maps.Geolocation(\"DRSBZ-WO43X-OLO4S-ZOVE5-AB6RV-5WFH2\", \"111\");\r\n        this.getLocation();\r\n    },\r\n    methods: {\r\n        initAddress (lat, lng) {\r\n            Toast.clear();\r\n            this.isOk = true;\r\n            const that = this;\r\n            this.lat = lat;\r\n            this.lng = lng;\r\n            const geocoder = new TMap.service.Geocoder();\r\n            const location = new TMap.LatLng(lat, lng);\r\n            geocoder\r\n                .getAddress({ location: location }) // 将给定的坐标位置转换为地址\r\n                .then((result) => {\r\n                    const { status, result: r } = result;\r\n                    if (status == 0) {\r\n                        that.list = [\r\n                            { addr: r.address, name: r.formatted_addresses.recommend, latLng: { lat, lng } }\r\n                        ];\r\n                    }\r\n\r\n                }).catch(err => {\r\n                    console.log(err, 'err');\r\n                });\r\n\r\n            this.initMap();\r\n        },\r\n        search () {\r\n            if (!this.isOk) return;\r\n            if (!this.address) return;\r\n            const that = this;\r\n            const searchService = new qq.maps.SearchService({\r\n                complete: function (results) {\r\n                    if (results.type === \"CITY_LIST\") {\r\n                        searchService.setLocation(results.detail.cities[0].cityName);\r\n                        if (that.address) {\r\n                            searchService.search(that.address);\r\n                        } else {\r\n                            // searchService.search(that.state.mapKeywords);\r\n                        }\r\n                        return;\r\n                    }\r\n                    const pois = results.detail.pois;\r\n                    that.list = pois.map(item => {\r\n                        return {\r\n                            addr: item.address,\r\n                            latLng: item.latLng,\r\n                            name: item.name\r\n                        };\r\n                    });\r\n                    // that.list = pois;\r\n                    // that.resMapList = pois;\r\n                    // that.setState({\r\n                    //   resMapList: pois,\r\n                    //   visible: true\r\n                    // })\r\n                    const latlngBounds = new qq.maps.LatLngBounds();\r\n                    for (let i = 0, l = pois.length; i < l; i++) {\r\n                        const poi = pois[i];\r\n                        latlngBounds.extend(poi.latLng);\r\n                    }\r\n                    that.map.fitBounds(latlngBounds);\r\n                    if (that.marker) {\r\n                        that.marker.setMap(null);\r\n                        that.marker = new qq.maps.Marker({\r\n                            position: pois[0].latLng,\r\n                            map: that.map\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n            searchService.search(this.address);\r\n        },\r\n        getLocation () {\r\n            this.str = '获取中';\r\n            const that = this;\r\n            const showPosition = (position) => {\r\n                // alert(JSON.stringify(position));\r\n                Toast.clear();\r\n                this.isOk = true;\r\n                const { lat, lng, nation, province, city, addr } = position;\r\n                this.str = JSON.stringify(position);\r\n                this.lat = lat;\r\n                this.lng = lng;\r\n                if (this.lat) {\r\n                    this.type = true;\r\n                }\r\n                const geocoder = new TMap.service.Geocoder();\r\n                const location = new TMap.LatLng(lat, lng);\r\n                geocoder\r\n                    .getAddress({ location: location }) // 将给定的坐标位置转换为地址\r\n                    .then((result) => {\r\n                        const { status, result: r } = result;\r\n                        if (status == 0) {\r\n                            that.list = [\r\n                                { addr: r.address, name: r.formatted_addresses.recommend, latLng: { lat, lng } }\r\n                            ];\r\n                        }\r\n\r\n                    }).catch(err => {\r\n                        console.log(err, 'err');\r\n                    });\r\n                // if (this.type) return;\r\n                this.initMap();\r\n            };\r\n\r\n            const showErr = (err) => {\r\n                console.log(err, 'test==>');\r\n                // this.str = JSON.stringify(err);\r\n                this.getLocation();\r\n            };\r\n            this.geolocation.getLocation(showPosition, showErr, { timeout: 30000 });\r\n        },\r\n        initMap () {\r\n            const _this = this;\r\n            const myLatlng = new qq.maps.LatLng(this.lat, this.lng);\r\n            // 设置地图属性\r\n            const myOptions = {\r\n                zoom: 15,\r\n                center: myLatlng,\r\n                mapTypeId: qq.maps.MapTypeId.ROADMAP\r\n            };\r\n            // 创建地图，绑定dom\r\n            setTimeout(() => {\r\n                const that = this;\r\n                const map = new qq.maps.Map(document.getElementById(\"container\"), myOptions);\r\n                this.map = map;\r\n                // 现实已经存在的点\r\n                let marker = null;\r\n                if (this.lat) {\r\n                    marker = new qq.maps.Marker({\r\n                        position: myLatlng,\r\n                        map: map\r\n                    });\r\n                }\r\n                this.map = map;\r\n                this.marker = marker;\r\n                this.location = {\r\n                    lat: this.lat,\r\n                    lng: this.lng\r\n                };\r\n                qq.maps.event.addListener(map, \"click\", function (event) {\r\n                    if (this.disabled) {\r\n                        return;\r\n                    }\r\n                    // 获取详细地址回调\r\n                    const geocoder = new qq.maps.Geocoder({\r\n                        complete: (result) => {\r\n                            // console.log(result.detail)\r\n                            _this.list = result.detail.nearPois.map(item => {\r\n                                return {\r\n                                    addr: item.address,\r\n                                    latLng: item.latLng,\r\n                                    name: item.name\r\n                                };\r\n                            });\r\n                        }\r\n                    });\r\n                    // if (marker) {\r\n                    //     marker.setMap(null);\r\n                    // }\r\n                    if (that.marker) {\r\n                        that.marker.setMap(null);\r\n                    }\r\n                    // 点击出现标记\r\n                    that.marker = new qq.maps.Marker({\r\n                        position: event.latLng,\r\n                        map: map\r\n                    });\r\n                    map.setZoom(20);\r\n                    map.setCenter(event.latLng);\r\n                    // eslint-disable-next-line no-new\r\n                    new qq.maps.LatLng();\r\n                    const a = new qq.maps.LatLng(\r\n                        event.latLng.getLat(),\r\n                        event.latLng.getLng()\r\n                    );\r\n                    geocoder.getAddress(a);\r\n                });\r\n            }, 500);\r\n        },\r\n        listClick (item) {\r\n            try {\r\n                const latlngBounds = new qq.maps.LatLngBounds();\r\n                latlngBounds.extend(item.latLng);\r\n                this.map.fitBounds(latlngBounds);\r\n                if (this.marker) {\r\n                    this.marker.setMap(null);\r\n                    this.marker = new qq.maps.Marker({\r\n                        position: item.latLng,\r\n                        map: this.map\r\n                    });\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n            alert(item.addr);\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.search {\r\n    height: 50px;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n.search-inp {\r\n    flex: 1;\r\n    margin-left: 10px;\r\n}\r\n.search-btn {\r\n    width: 60px;\r\n    height: 30px;\r\n    background: #07c160;\r\n    margin: 0 10px;\r\n    color: white;\r\n    border-radius: 4px;\r\n    text-align: center;\r\n    line-height: 30px;\r\n}\r\n#container {\r\n    /*地图(容器)显示大小*/\r\n    width: 1200px;\r\n    height: 400px;\r\n}\r\n.list {\r\n    position: absolute;\r\n    top: 450px;\r\n    bottom: 0px;\r\n    left: 0;\r\n    right: 0;\r\n    overflow-y: auto;\r\n}\r\n.list-item {\r\n    height: 60px;\r\n    width: 100%;\r\n    border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n    box-sizing: border-box;\r\n    padding-left: 10px;\r\n    display: flex;\r\n}\r\n.list-item-left {\r\n    flex-direction: column;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex: 1;\r\n    overflow: hidden;\r\n}\r\n.list-item-address {\r\n    font-size: 12px;\r\n    color: rgb(59, 58, 58);\r\n    padding-top: 10px;\r\n}\r\n.list-item-btn {\r\n    height: 60px;\r\n    line-height: 60px;\r\n    right: 20px;\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n    margin: 0 10px;\r\n}\r\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./welcomeContent.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./welcomeContent.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./welcomeContent.vue?vue&type=template&id=0eabad9a&scoped=true&\"\nimport script from \"./welcomeContent.vue?vue&type=script&lang=js&\"\nexport * from \"./welcomeContent.vue?vue&type=script&lang=js&\"\nimport style0 from \"./welcomeContent.vue?vue&type=style&index=0&id=0eabad9a&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0eabad9a\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticStyle","attrs","staticClass","model","value","address","callback","$$v","expression","on","search","_v","_l","list","item","index","key","$event","listClick","_s","name","addr","staticRenderFns","qq","window","data","str","created","document","mounted","Toast","duration","forbidClick","message","methods","initAddress","geocoder","getAddress","location","then","result","status","that","latLng","lat","lng","catch","err","console","complete","searchService","latlngBounds","position","map","getLocation","nation","province","city","timeout","initMap","zoom","center","mapTypeId","setTimeout","marker","_this","event","alert","component"],"sourceRoot":""}